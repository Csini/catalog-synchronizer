asyncapi: 3.0.0
info:
  title: catalog-synchronizer
  version: 2.0.0-SNAPSHOT
  description: Catalog Syncronizer with Apache Kafka and Springboot
  contact:
    name: csini
    url: https://github.com/Csini/catalog-synchronizer
    email: csini@gmx.com
  license:
    name: MIT License
  x-generator: springwolf
defaultContentType: application/json
servers:
  kafka-server:
    host: localhost:9092
    protocol: kafka
channels:
  hu.exercise.spring.kafka.event.DBEvent:
    address: hu.exercise.spring.kafka.event.DBEvent
    messages:
      java.lang.Object:
        $ref: "#/components/messages/java.lang.Object"
  hu.exercise.spring.kafka.event.Flushed:
    address: hu.exercise.spring.kafka.event.Flushed
    messages:
      PayloadNotUsed:
        $ref: "#/components/messages/PayloadNotUsed"
  hu.exercise.spring.kafka.event.ProductErrorEvent:
    address: hu.exercise.spring.kafka.event.ProductErrorEvent
    messages:
      hu.exercise.spring.kafka.event.ProductErrorEvent:
        $ref: "#/components/messages/hu.exercise.spring.kafka.event.ProductErrorEvent"
  hu.exercise.spring.kafka.event.ReadedFromDBEvent:
    address: hu.exercise.spring.kafka.event.ReadedFromDBEvent
    messages:
      io.reactivex.rxjava3.core.Observable:
        $ref: "#/components/messages/io.reactivex.rxjava3.core.Observable"
  hu.exercise.spring.kafka.event.Run:
    address: hu.exercise.spring.kafka.event.Run
    messages:
      hu.exercise.spring.kafka.input.Run:
        $ref: "#/components/messages/hu.exercise.spring.kafka.input.Run"
  hu.exercise.spring.kafka.event.ValidProductEvent}:
    address: "hu.exercise.spring.kafka.event.ValidProductEvent}"
    messages:
      io.reactivex.rxjava3.core.Observable:
        $ref: "#/components/messages/io.reactivex.rxjava3.core.Observable"
components:
  schemas:
    HeadersNotDocumented:
      title: HeadersNotDocumented
      type: object
      properties: {}
      description: "There can be headers, but they are not explicitly documented."
      examples:
        - {}
    PayloadNotUsed:
      title: PayloadNotUsed
      type: object
      properties: {}
      description: No payload specified
      examples:
        - {}
    hu.exercise.spring.kafka.event.ProductErrorEvent:
      title: ProductErrorEvent
      type: object
      properties:
        errorMessage:
          type: string
        id:
          type: string
          description: Your product’s unique identifier
          examples:
            - A2B4
        product:
          $ref: "#/components/schemas/hu.exercise.spring.kafka.input.Product"
        requestid:
          type: string
          description: Run's unique identifier
          format: uuid
          examples:
            - a3dbaa5a-1375-491e-8c21-403864de8779
      examples:
        - errorMessage: string
          id: A2B4
          product:
            age_group: infant
            availability: in_stock
            brand: Google
            condition: new
            created: 2015-07-20T15:49:04-07:00
            description: "Made from 100% organic cotton, this classic red men’s polo\
              \ has a slim fit and signature logo embroidered on the left chest. Machine\
              \ wash cold; imported."
            google_product_category: "371"
            id: A2B4
            image_link: http:// www.example.com/image1.jpg
            link: http://www.example.com/asp/sp.asp?cat=12&id=1030
            price: 15.00 USD
            run:
              created: 2015-07-20T15:49:04-07:00
              filename: file4.txt
              requestid: a3dbaa5a-1375-491e-8c21-403864de8779
              updated: 2015-07-20T15:49:04-07:00
            sale_price: 15.00 USD
            title: Mens Pique Polo Shirt
            updated: 2015-07-20T15:49:04-07:00
          requestid: a3dbaa5a-1375-491e-8c21-403864de8779
    hu.exercise.spring.kafka.input.MonetaryAmount:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: object
          properties:
            currencyCode:
              type: string
            defaultFractionDigits:
              type: integer
              format: int32
            displayName:
              type: string
            numericCode:
              type: integer
              format: int32
            numericCodeAsString:
              type: string
            symbol:
              type: string
      description: Your product's sale price
      examples:
        - 15.00 USD
      required:
        - currency
    hu.exercise.spring.kafka.input.Product:
      type: object
      properties:
        age_group:
          type: string
          description: The demographic for which your product is intended
          enum:
            - NEWBORN
            - INFANT
            - TODDLER
            - KIDS
            - ADULT
          examples:
            - infant
        availability:
          type: string
          description: Your product's availability
          enum:
            - IN_STOCK
            - OUT_OF_STOCK
            - PREORDER
            - BACKORDER
          examples:
            - in_stock
        brand:
          type: string
          description: Your product’s brand name
          examples:
            - Google
        condition:
          type: string
          description: The condition of your product at time of sale
          enum:
            - NEW
            - REFURBISHED
            - USED
          examples:
            - new
        created:
          type: string
          format: date-time
        description:
          type: string
          description: Your product’s description
          examples:
            - "Made from 100% organic cotton, this classic red men’s polo has a slim\
              \ fit and signature logo embroidered on the left chest. Machine wash\
              \ cold; imported."
        google_product_category:
          type: string
          description: Google-defined product category for your product
          examples:
            - "371"
        id:
          type: string
          description: Your product’s unique identifier
          examples:
            - A2B4
        image_link:
          type: string
          description: The URL of your product’s main image
          examples:
            - http:// www.example.com/image1.jpg
        link:
          type: string
          description: Your product’s landing page
          examples:
            - http://www.example.com/asp/sp.asp?cat=12&id=1030
        price:
          $ref: "#/components/schemas/hu.exercise.spring.kafka.input.MonetaryAmount"
        run:
          $ref: "#/components/schemas/hu.exercise.spring.kafka.input.Run"
        sale_price:
          $ref: "#/components/schemas/hu.exercise.spring.kafka.input.MonetaryAmount"
        title:
          type: string
          description: Your product’s name
          examples:
            - Mens Pique Polo Shirt
        updated:
          type: string
          format: date-time
      examples:
        - age_group: infant
          availability: in_stock
          brand: Google
          condition: new
          created: 2015-07-20T15:49:04-07:00
          description: "Made from 100% organic cotton, this classic red men’s polo\
            \ has a slim fit and signature logo embroidered on the left chest. Machine\
            \ wash cold; imported."
          google_product_category: "371"
          id: A2B4
          image_link: http:// www.example.com/image1.jpg
          link: http://www.example.com/asp/sp.asp?cat=12&id=1030
          price: 15.00 USD
          run:
            created: 2015-07-20T15:49:04-07:00
            filename: file4.txt
            requestid: a3dbaa5a-1375-491e-8c21-403864de8779
            updated: 2015-07-20T15:49:04-07:00
          sale_price: 15.00 USD
          title: Mens Pique Polo Shirt
          updated: 2015-07-20T15:49:04-07:00
      required:
        - availability
        - description
        - id
        - image_link
        - link
        - price
        - title
    hu.exercise.spring.kafka.input.Run:
      title: Run
      type: object
      properties:
        created:
          type: string
          format: date-time
        filename:
          type: string
          description: Name of the Input File for this run.
          examples:
            - file4.txt
        requestid:
          type: string
          description: Run's unique identifier
          examples:
            - a3dbaa5a-1375-491e-8c21-403864de8779
        updated:
          type: string
          format: date-time
      examples:
        - created: 2015-07-20T15:49:04-07:00
          filename: file4.txt
          requestid: a3dbaa5a-1375-491e-8c21-403864de8779
          updated: 2015-07-20T15:49:04-07:00
    io.reactivex.rxjava3.core.Observable:
      title: Observable
      type: object
      examples:
        - {}
    java.lang.Object:
      title: Iterable
      type: object
      examples:
        - {}
  messages:
    PayloadNotUsed:
      headers:
        $ref: "#/components/schemas/HeadersNotDocumented"
      payload:
        schemaFormat: application/vnd.aai.asyncapi+json;version=3.0.0
        schema:
          $ref: "#/components/schemas/PayloadNotUsed"
      name: PayloadNotUsed
      title: PayloadNotUsed
      description: No payload specified
      bindings: {}
    hu.exercise.spring.kafka.event.ProductErrorEvent:
      headers:
        $ref: "#/components/schemas/HeadersNotDocumented"
      payload:
        schemaFormat: application/vnd.aai.asyncapi+json;version=3.0.0
        schema:
          $ref: "#/components/schemas/hu.exercise.spring.kafka.event.ProductErrorEvent"
      name: hu.exercise.spring.kafka.event.ProductErrorEvent
      title: ProductErrorEvent
      bindings: {}
    hu.exercise.spring.kafka.input.Run:
      headers:
        $ref: "#/components/schemas/HeadersNotDocumented"
      payload:
        schemaFormat: application/vnd.aai.asyncapi+json;version=3.0.0
        schema:
          $ref: "#/components/schemas/hu.exercise.spring.kafka.input.Run"
      name: hu.exercise.spring.kafka.input.Run
      title: Run
      bindings: {}
    io.reactivex.rxjava3.core.Observable:
      headers:
        $ref: "#/components/schemas/HeadersNotDocumented"
      payload:
        schemaFormat: application/vnd.aai.asyncapi+json;version=3.0.0
        schema:
          $ref: "#/components/schemas/io.reactivex.rxjava3.core.Observable"
      name: io.reactivex.rxjava3.core.Observable
      title: Observable
      bindings: {}
    java.lang.Object:
      headers:
        $ref: "#/components/schemas/HeadersNotDocumented"
      payload:
        schemaFormat: application/vnd.aai.asyncapi+json;version=3.0.0
        schema:
          $ref: "#/components/schemas/java.lang.Object"
      name: java.lang.Object
      title: Iterable
      bindings: {}
operations:
  hu.exercise.spring.kafka.event.DBEvent_send_sendAll:
    action: send
    channel:
      $ref: "#/channels/hu.exercise.spring.kafka.event.DBEvent"
    title: hu.exercise.spring.kafka.event.DBEvent_send
    description: All the DB Actions done by the request.
    bindings: {}
    messages:
      - $ref: "#/channels/hu.exercise.spring.kafka.event.DBEvent/messages/java.lang.Object"
  hu.exercise.spring.kafka.event.Flushed_receive_flushedListener:
    action: receive
    channel:
      $ref: "#/channels/hu.exercise.spring.kafka.event.Flushed"
    title: hu.exercise.spring.kafka.event.Flushed_receive
    description: Auto-generated description
    bindings: {}
    messages:
      - $ref: "#/channels/hu.exercise.spring.kafka.event.Flushed/messages/PayloadNotUsed"
  hu.exercise.spring.kafka.event.ProductErrorEvent_send_sendEvent:
    action: send
    channel:
      $ref: "#/channels/hu.exercise.spring.kafka.event.ProductErrorEvent"
    title: hu.exercise.spring.kafka.event.ProductErrorEvent_send
    description: All the invalid Products readed from the input TSV.
    bindings: {}
    messages:
      - $ref: "#/channels/hu.exercise.spring.kafka.event.ProductErrorEvent/messages/hu.exercise.spring.kafka.event.ProductErrorEvent"
  hu.exercise.spring.kafka.event.ReadedFromDBEvent_send_sendMessages:
    action: send
    channel:
      $ref: "#/channels/hu.exercise.spring.kafka.event.ReadedFromDBEvent"
    title: hu.exercise.spring.kafka.event.ReadedFromDBEvent_send
    description: All the Product readed from DB.
    bindings: {}
    messages:
      - $ref: "#/channels/hu.exercise.spring.kafka.event.ReadedFromDBEvent/messages/io.reactivex.rxjava3.core.Observable"
  hu.exercise.spring.kafka.event.Run_send_sendRunMessage:
    action: send
    channel:
      $ref: "#/channels/hu.exercise.spring.kafka.event.Run"
    title: hu.exercise.spring.kafka.event.Run_send
    description: All the Runs started from catalog-syncronizer.
    bindings: {}
    messages:
      - $ref: "#/channels/hu.exercise.spring.kafka.event.Run/messages/hu.exercise.spring.kafka.input.Run"
  hu.exercise.spring.kafka.event.ValidProductEvent}_send_sendEvent:
    action: send
    channel:
      $ref: "#/channels/hu.exercise.spring.kafka.event.ValidProductEvent}"
    title: "hu.exercise.spring.kafka.event.ValidProductEvent}_send"
    description: All the valid Products readed by the request from the input TSV.
    bindings: {}
    messages:
      - $ref: "#/channels/hu.exercise.spring.kafka.event.ValidProductEvent}/messages/io.reactivex.rxjava3.core.Observable"
